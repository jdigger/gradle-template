repositories {
    mavenCentral()
    maven {
            url 'http://canoe-ventures.artifactoryonline.com/canoe_ventures/scala-tools'
            credentials {
                username = "${artifactoryUsername}"
                password = "${artifactoryPassword}"
            }
        }
    maven {
            url 'http://canoe-ventures.artifactoryonline.com/canoe_ventures/scala-tools'
            credentials {
                username = "${artifactoryUsername}"
                password = "${artifactoryPassword}"
            }
        }
}

apply plugin: 'java'
apply plugin: 'scala'

group = 'THEGROUP'
archivesBaseName = 'PROJECTNAME'

sourceCompatibility = '1.6'
def scala_version = '2.9.1'

dependencies {
    scalaTools "org.scala-lang:scala-compiler:${scala_version}"
    scalaTools "org.scala-lang:scala-library:${scala_version}"
    compile "org.scala-lang:scala-library:${scala_version}"
    compile "org.slf4j:jcl-over-slf4j:${slf4j_version}"
    compile "org.slf4j:slf4j-api:${slf4j_version}"

    runtime "ch.qos.logback:logback-classic:${logback_classic_version}"
    testCompile(group:"org.scalatest", name:"scalatest_2.9.1", version:"1.6.1")

}

// code-quality
apply plugin: 'jdepend'
apply plugin: 'pmd'

// IDE support
apply plugin: 'idea'
apply plugin: 'eclipse'


afterEvaluate {
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    artifacts {
        archives sourcesJar
    }

    javadoc {
        title = "${name.charAt(0).toUpperCase()}${name.substring(1, name.length())} API ${version}"
        if (file("src/main/scala/overview.html").exists()) {
            options.overview = file("src/main/scala/overview.html").absolutePath
        }
        options.links = ["http://www.scala-lang.org/api/current/index.html#package"]
    }
}

test.doLast {
    ant.taskdef(name: 'scalatest',
                classname: 'org.scalatest.tools.ScalaTestAntTask',
                classpath: sourceSets.test.runtimeClasspath.asPath
    )
    ant.scalatest(runpath: sourceSets.test.classesDir,
                  haltonfailure: 'true',
                  fork: 'false') {reporter(type: 'stderr')}
}

